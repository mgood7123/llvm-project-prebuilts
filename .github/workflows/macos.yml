# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days

name: macos

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  should_run:
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 4 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] macos [4]
  
  build_deps:
    if: false
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ matrix.os }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          # macos-12 has groff however it also has 63 GB storage, this does not meet our needs so upgrade to 13 and 14
          # 
          # Filesystem       Size   Used  Avail Capacity iused      ifree %iused  Mounted on
          # /dev/disk1s5s1  380Gi   14Gi  154Gi     9%  553830 3981986570    0%   /   # macos 11 (Intel)
          # /dev/disk1s5s1  300Gi   14Gi   63Gi    19%  502376  665033400    0%   /   # macos 12 (Intel)
          # /dev/disk1s5s1  300Gi  8.7Gi  152Gi     6%  356810 1590762200    0%   /   # macos 13 (Intel)
          # /dev/disk3s1s1  295Gi  9.4Gi  153Gi     6%    394k       1.6G    0%   /   # macos 14 (M1)

          - os: macos-13
            name: macos-intel
            install_groff: export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1; brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done; brew install groff
          - os: macos-14
            name: macos-m1
            install_groff: HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install groff

    runs-on: ${{ matrix.os }}

    name: deps - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: brew config
        run: |
          brew config || true

      - name: brew doctor
        run: |
          brew doctor || true

      - name: install autotools
        run: |
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install automake

      - name: install groff
        run: |
          ${{ matrix.install_groff }}

      # - name: install clang 17
      #   run: |
      #     HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install llvm@17

      - name: clone libiconv
        run: |
          cd deps ; git clone git://git.savannah.gnu.org/libiconv.git libiconv --recursive --depth=1

      - name: libiconv autopull.sh
        run: |
          cd deps ; cd libiconv ; ./autopull.sh --one-time

      - name: install coreutils
        run: |
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install coreutils

      - name: check if build directory is cached
        run: |
          chmod +x try_get_release.sh
          chmod +x try_get_release_or.sh
            # ./try_get_release.sh   user   repo   file   tag
            #
            # response=$? # 0=match, -1=corrupt, -2=missing
            #
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--deps--${{ matrix.os }}   cmake_build_dir.tar || true

      - name: cmake build deps - Debug
        run: |
          export PATH="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"
          #export PATH="$HOMEBREW_PREFIX/opt/llvm/bin:$PATH"
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-g3 -O0" -DCMAKE_CXX_FLAGS="-g3 -O0" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -S . -B BUILD_DEBUG

      - name: archive build directory
        run: |
          tar -cf cmake_build_dir.tar BUILD_DEBUG
          sha512sum cmake_build_dir.tar > cmake_build_dir.tar.sha512
          # we need only the rootfs in the next stage
          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
          rm -rf BUILD_DEBUG
          # preserve the directory structure
          mkdir BUILD_DEBUG
          mkdir BUILD_DEBUG/BUILD_ROOT
          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
          tar -cf cmake_build_dir_root_fs.tar BUILD_DEBUG
          sha512sum cmake_build_dir_root_fs.tar > cmake_build_dir_root_fs.tar.sha512

      - name: list files
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "cmake_build_dir"
          tag: "storage--deps--${{ matrix.os }}"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            cmake_build_dir.tar
            cmake_build_dir.tar.sha512
            cmake_build_dir_root_fs.tar
            cmake_build_dir_root_fs.tar.sha512





  build_llvm_stage_1:
    needs: build_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ matrix.os }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: macos-13
            name: macos-intel
          - os: macos-14
            name: macos-m1

    runs-on: ${{ matrix.os }}

    name: llvm stage 1 - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: install clang 17
        run: |
          brew install llvm@17

      - name: install coreutils
        run: |
          brew install coreutils

      - name: check if build directory is cached
        run: |
          chmod +x try_get_release.sh
          chmod +x try_get_release_or.sh
            # ./try_get_release_or.sh   user   repo   tag1   file1   or_tag2   or_file2
            #
            # response=$? # 0=match, -1=corrupt, -2=missing
            #
            # in non-0 it is an error and we cannot continue
            #
            # we need the previous job's rootfs
          ./try_get_release_or.sh   mgood7123   llvm-project-prebuilts   storage--llvm-stage-1--macos   cmake_build_dir.tar   storage--deps--${{ matrix.os }}   cmake_build_dir_root_fs.tar

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 1 - Debug - Configure
        run: |
          export PATH="$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"
          export PATH="$HOMEBREW_PREFIX/opt/llvm/bin:$PATH"
          cmake -G "Unix Makefiles" -DLLVM_OPTIMIZED_TABLEGEN=true -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_DEBUG/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_DEBUG/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-g3 -O0" -DCMAKE_CXX_FLAGS="-g3 -O0" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -S llvm-project/llvm -B BUILD_DEBUG

      - name: cmake LLVM STAGE 1 - Debug - Build
        run: |
          cmake --build BUILD_DEBUG

      - name: cmake LLVM STAGE 1 - Debug - Install
        run: |
          cmake --install BUILD_DEBUG

      - name: archive build directory
        run: |
          # we need only the rootfs in the next stage
          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
          rm -rf BUILD_DEBUG
          # preserve the directory structure
          mkdir BUILD_DEBUG
          mkdir BUILD_DEBUG/BUILD_ROOT
          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
          tar -cf cmake_build_dir_root_fs.tar BUILD_DEBUG
          sha512sum cmake_build_dir_root_fs.tar > cmake_build_dir_root_fs.tar.sha512

      - name: list files
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "cmake_build_dir"
          tag: "storage--llvm-stage-1--macos"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            cmake_build_dir_root_fs.tar
            cmake_build_dir_root_fs.tar.sha512

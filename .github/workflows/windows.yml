# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days

name: windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: msys2 {0}

# each job runs under a NEW image
jobs:
  should_run:
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 2 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] windows [4]
       shell: bash
  
  build_deps:
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: clang64

    runs-on: ${{ matrix.os }}

    name: ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: test symlink support
        run: |
          export MSYS=winsymlinks:native
          touch a
          ln -s a b
          cp -v -r deps/zstd/tests/cli-tests/bin .
          rm -f a
          rm -f b
          rm -rf bin

      - name: update packages
        run: |
          pacman -Sy

      - name: install pacboy
        run: |
          pacman -Syu --noconfirm --needed pactoys

      - name: update packages
        run: |
          pacboy -Sy

      - name: install findutils
        run: |
          pacboy -S --noconfirm --needed findutils
          which find
          ls -l /usr/bin/find.exe

      - name: install clang 17
        run: |
          pacboy -S --noconfirm --needed clang:p

      - name: install cmake
        run: |
          pacboy -S --noconfirm --needed make:p cmake:p

      - name: install autotools
        run: |
          pacboy -S --noconfirm --needed autotools:p

      - name: install patch
        run: |
          pacboy -S --noconfirm --needed patch

      - name: install gperf
        run: |
          pacboy -S --noconfirm --needed gperf:p

      - name: install groff
        run: |
          pacboy -S --noconfirm --needed groff

      - name: install git
        run: |
          pacboy -S --noconfirm --needed git

      - name: install gettext
        run: |
          pacboy -S --noconfirm --needed gettext

      - name: clone libiconv
        run: |
          export MSYS=winsymlinks:native
          cd deps ; git clone git://git.savannah.gnu.org/libiconv.git libiconv --recursive --depth=1

      - name: libiconv autopull.sh
        run: |
          export MSYS=winsymlinks:native
          cd deps ; cd libiconv ; ./autopull.sh --one-time

      - name: check if build directory is cached
        run: |
          chmod +x try_get_release.sh
          chmod +x try_get_release_or.sh
            # ./try_get_release.sh   user   repo   file   tag
            #
            # response=$? # 0=match, -1=corrupt, -2=missing
            #
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--deps--windows   cmake_build_dir.tar || true

      - name: cmake build deps - Debug
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-g3 -O0" -DCMAKE_CXX_FLAGS="-g3 -O0" -DCMAKE_MAKE_PROGRAM=mingw32-make -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -S . -B BUILD_DEBUG

      - name: archive build directory
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          tar -cf cmake_build_dir.tar BUILD_DEBUG
          sha512sum cmake_build_dir.tar > cmake_build_dir.tar.sha512

      - name: list files
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "cmake_build_dir"
          tag: "storage--deps--windows"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            cmake_build_dir.tar
            cmake_build_dir.tar.sha512







  build_llvm_stage_1:
    needs: build_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: clang64

    runs-on: ${{ matrix.os }}

    name: ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: test symlink support
        run: |
          export MSYS=winsymlinks:native
          touch a
          ln -s a b
          cp -v -r deps/zstd/tests/cli-tests/bin .
          rm -f a
          rm -f b
          rm -rf bin

      - name: update packages
        run: |
          pacman -Sy

      - name: install pacboy
        run: |
          pacman -Syu --noconfirm --needed pactoys

      - name: update packages
        run: |
          pacboy -Sy

      - name: install findutils
        run: |
          pacboy -S --noconfirm --needed findutils
          which find
          ls -l /usr/bin/find.exe

      - name: install clang 17
        run: |
          pacboy -S --noconfirm --needed clang:p

      - name: install cmake
        run: |
          pacboy -S --noconfirm --needed make:p cmake:p

      - name: install git
        run: |
          pacboy -S --noconfirm --needed git

      - name: check if build directory is cached
        run: |
          chmod +x try_get_release.sh
          chmod +x try_get_release_or.sh
            # ./try_get_release_or.sh   user   repo   tag1   file1   or_tag2   or_file2
            #
            # response=$? # 0=match, -1=corrupt, -2=missing
            #
            # in non-0 it is an error and we cannot continue
            #
            # we need the previous job's deps
          ./try_get_release_or.sh   mgood7123   llvm-project-prebuilts   storage--llvm-stage-1--windows   cmake_build_dir.tar   storage--deps--windows   cmake_build_dir.tar

            # ./try_get_release.sh   user   repo   file   tag
            #
            # response=$? # 0=match, -1=corrupt, -2=missing
            #
          #./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--llvm-stage-1--windows   cmake_build_dir.tar

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 1 - Debug - Configure
        run: |
          export MSYS=winsymlinks:native
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-g3 -O0" -DCMAKE_CXX_FLAGS="-g3 -O0" -DCMAKE_MAKE_PROGRAM=mingw32-make -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -S llvm-project -B BUILD_DEBUG

      - name: cmake LLVM STAGE 1 - Debug - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_DEBUG

      - name: archive build directory
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          tar -cf cmake_build_dir.tar BUILD_DEBUG
          sha512sum cmake_build_dir.tar > cmake_build_dir.tar.sha512

      - name: list files
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "cmake_build_dir"
          tag: "storage--llvm-stage-1--windows"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            cmake_build_dir.tar
            cmake_build_dir.tar.sha512

      # - name: cmake build - Debug - Install
      #   run: |
      #     export MSYS=winsymlinks:native
      #     cmake --install BUILD_DEBUG

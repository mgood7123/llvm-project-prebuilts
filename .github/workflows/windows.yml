# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days


# llvm stage 1 builds llvm + clang, no runtimes
# llvm stage 2 rebuilds llvm + clang with the clang built from llvm stage 1
# llvm stage 3 rebuilds entire llvm with the clang built from llvm stage 2

# from llvm
#
# https://github.com/llvm/llvm-project/blob/main/llvm/utils/release/test-release.sh#L469
#
    # During the first two phases, there is no need to build any of the projects
    # except clang, since these phases are only meant to produce a bootstrapped
    # clang compiler, capable of building the third phase.
#
    # During the first phase, there is no need to build any of the runtimes,
    # since this phase is only meant to get a clang compiler, capable of
    # building itself and any selected runtimes in the second phase.
#
      # compiler-rt builtins is needed on AIX to have a functional Phase 1 clang.
#
# note github actions do NOT provide an AIX system so we do not need to check for the presense of such flag


name: windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: msys2 {0}

# each job runs under a NEW image
jobs:
  should_run:
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 2 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] windows [4]
       shell: bash
  
  msys2_build_split:
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 split - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install packages
        run: |
          pacman -S --noconfirm --needed git gcc make cmake ninja python autotools

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          cd split
          chmod +x ../try_get_release.sh
          ../try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split_build.tar || true

      - name: build split program
        run: |
          export MSYS=winsymlinks:native
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          chmod +x try_get_release.sh
          cd split
          chmod +x make.sh
          ./make.sh

      - name: archive split build directory
        run: |
          export MSYS=winsymlinks:native
          cd split
          # we need only the rootfs in the next stage
          cp /usr/bin/msys-2.0.dll BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin
          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
          tar -cf split_build.tar BUILD_DEBUG
          sha512sum split_build.tar > split_build.tar.sha512
          rm -rf BUILD_DEBUG
          # preserve the directory structure
          mkdir BUILD_DEBUG
          mkdir BUILD_DEBUG/BUILD_ROOT
          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
          tar -cf split_rootfs.tar BUILD_DEBUG
          sha512sum split_rootfs.tar > split_rootfs.tar.sha512
          cd ..
          mkdir split_exe
          cp split/BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin/split.exe split_exe
          cp /usr/bin/msys-2.0.dll split_exe
          tar -cf split.exe.tar split_exe
          sha512sum split.exe.tar > split.exe.tar.sha512
          rm -rf split/BUILD_DEBUG
          rm -rf split_exe
          tar -xf split.exe.tar
          echo "checking if packaged split.exe works"
          ./split_exe/split.exe
          echo "packaged split.exe works"

      - name: list files
        run: |
          ls -l
      
      - name: upload split build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "split"
          tag: "storage--split--windows"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./split/split_build.tar
            ./split/split_build.tar.sha512
            ./split/split_rootfs.tar
            ./split/split_rootfs.tar.sha512
            ./split.exe.tar
            ./split.exe.tar.sha512

# msys2 clang 11 is too old to build iconv, pre-package system libs into rootfs
# msys2 clang 11 lacks stdc++ headers, build bootstrap stage 3 with gcc then rebuild real clang via bootstrap clang

# build order:
#
# due to ~150 GB space, we cannot install clang from stage 3 as a system and use it to rebuild clang
# since we must be able to package between stages and we cannot package the root directory /
# so instead we build with runtimes in each stage so the runtimes persist between each stage
# while also getting more and more optimized with each subsequent stage
#
# due to 65k symbols per-dll PE limitation, we always build with -DCMAKE_BUILD_SHARED_LIBS=ON to build everything
# as a dll instead of an object archive, until the [hidden] attribute gets implemented for MSYS2/CYGWIN
#
# we avoid testing since git main branches are typically unstable and may fail at any time in any test
# we only care that everything compiles successfully and need not run tests
#
#   the gcc stage 1 root fs without runtimes and X86 only target and no plugin exports is 7.4 GB
#   the gcc stage 1 build without runtimes and X86 only target and no plugin exports is 10 GB
#
#   gcc
#     // build with gcc
#       install required deps into rootfs via pacman and package
#       clang      + runtimes - stage 1 - DLL everything
#       clang      + runtimes - stage 2 - DLL everything
#       everything + runtimes - stage 3 - DLL everything
#         // build with stage 3 clang that we had just built
#           build required deps and package
#           clang      + runtimes - stage 1 - DLL everything
#           clang      + runtimes - stage 2 - DLL everything
#           everything + runtimes - stage 3 - DLL everything

  msys2_prebuilt_bootstrap_msys2_build_deps:
    needs: msys2_build_split
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 0
            llvm_stage_old: 0

    runs-on: ${{ matrix.os }}

    name: msys2 deps (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install rootfs
        run: |
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/tmp
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/var
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/var/lib
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/var/lib/pacman
          pacman -Sy --noconfirm --needed --root "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          pacman -S --noconfirm --needed --root "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS" bash
          pacman -S --noconfirm --needed --root "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS" libarchive libarchive-devel ncurses ncurses-devel libedit libedit-devel libxml2 libxml2-devel zlib zlib-devel libzstd libzstd-devel liblz4 liblz4-devel liblzma liblzma-devel libxxhash libxxhash-devel libiconv libiconv-devel openssl openssl-devel libexpat libexpat-devel liblzo2 liblzo2-devel

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/usr --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--deps--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  msys2_prebuilt_bootstrap_msys2_build_llvm_stage_1:
    needs: msys2_prebuilt_bootstrap_msys2_build_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 1
            llvm_stage_old: 0

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage ${{ matrix.llvm_stage }} (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install gcc
        run: |
          pacman -S --noconfirm --needed gcc

      - name: install ccache
        run: |
          pacman -S --noconfirm --needed ccache

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          S=${{ matrix.llvm_stage }}

          URL0=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_llvm_commits--release/llvm_commits.split.map
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_llvm--release/ccache_llvm.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_clang--release/build_clang.split.map
          URL3=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_compiler_rt--release/build_compiler_rt.split.map
          URL4=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libcxx--release/build_libcxx.split.map
          URL5=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libcxxabi--release/build_libcxxabi.split.map
          URL6=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libunwind--release/build_libunwind.split.map
          URL7=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL0 --out llvm_commits || true
          ./split_exe/split.exe --join -r $URL1 --out ccache_llvm || true
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_clang || true
          ./split_exe/split.exe --join -r $URL3 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt || true
          ./split_exe/split.exe --join -r $URL4 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx || true
          ./split_exe/split.exe --join -r $URL5 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi || true
          ./split_exe/split.exe --join -r $URL6 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind || true
          # always download the previous stage's build rootfs
          ./split_exe/split.exe --join -r $URL7 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "gcc" > c_compiler
          echo "g++" > cxx_compiler

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project
          cd llvm-project
          git log --pretty=format:'%H' -n 1 > ../llvm_commits/llvm_commit_current
          if [[ ! -e ../llvm_commits/llvm_commit_last ]]
            then
              cp ../llvm_commits/llvm_commit_current ../llvm_commits/llvm_commit_last
          fi
          git log $(cat ../last_llvm_commit)..$(cat ../current_llvm_commit) --pretty=format:'%H' > ../llvm_commits/llvm_commit_diff
          git log $(cat ../last_llvm_commit)..$(cat ../current_llvm_commit) --date=relative > ../llvm_commits/llvm_commit_diff_verbose
          git log $(cat ../last_llvm_commit)..$(cat ../current_llvm_commit) --date=relative --color > ../llvm_commits/llvm_commit_diff_verbose_color
          git log $(cat ../last_llvm_commit)..$(cat ../current_llvm_commit) --date=relative -p > ../llvm_commits/llvm_commit_diff_verbose_changes
          git log $(cat ../last_llvm_commit)..$(cat ../current_llvm_commit) --date=relative -p --color > ../llvm_commits/llvm_commit_diff_verbose_changes_color
          NEW_COMMITS=$(cat ../llvm_commits/llvm_commit_diff | wc -w)
          if [[ "$NEW_COMMITS" == "0" ]]
            then
              echo "no new commits"
            else
              if [[ "$NEW_COMMITS" == "1" ]]
                then
                  echo "$NEW_COMMITS new commit has arrived"
                  cat ../llvm_commits/llvm_commit_diff_verbose_color
                else
                  echo "$NEW_COMMITS new commits have arrived"
                  cat ../llvm_commits/llvm_commit_diff_verbose_color
              fi
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          echo "$(pwd)/ccache_llvm" > current_cache_dir

          # setup ccache

          rm -rf ccache_bin || true
          mkdir ccache_bin
          (
           cd ccache_bin
           ln -s $(which ccache) gcc
           ln -s $(which ccache) g++
          )
          export PATH="$(pwd)/ccache_bin:$PATH"
          export CCACHE_DIR="$(cat current_cache_dir)"
          export CCACHE_DEBUG=true
          export CCACHE_COMMENTS=true
          export CCACHE_LOGFILE="$CCACHE_DIR/ccache_log.txt"
          export CCACHE_STATSLOG="$CCACHE_DIR/ccache_statslog.txt"
          export CCACHE_SLOPPINESS="file_stat_matches_ctime,include_file_ctime,include_file_mtime,time_macros"

          mkdir "$CCACHE_DIR" || true
          rm "$CCACHE_DIR/ccache_log.txt" || true
          rm "$CCACHE_DIR/ccache_statslog.txt" || true
          touch "$CCACHE_DIR/ccache_log.txt" || true
          touch "$CCACHE_DIR/ccache_statslog.txt" || true
          chmod 777 "$CCACHE_DIR/ccache_log.txt" || true
          chmod 777 "$CCACHE_DIR/ccache_statslog.txt" || true

          ccache -s -vv -x --show-config
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          export PATH="$(pwd)/ccache_bin:$PATH"
          export CCACHE_DIR="$(cat current_cache_dir)"
          export CCACHE_DEBUG=true
          export CCACHE_COMMENTS=true
          export CCACHE_LOGFILE="$CCACHE_DIR/ccache_log.txt"
          export CCACHE_STATSLOG="$CCACHE_DIR/ccache_statslog.txt"
          export CCACHE_SLOPPINESS="file_stat_matches_ctime,include_file_ctime,include_file_mtime,time_macros"
          ccache -s -vv -x --show-config
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          export PATH="$(pwd)/ccache_bin:$PATH"
          export CCACHE_DIR="$(cat current_cache_dir)"
          export CCACHE_DEBUG=true
          export CCACHE_COMMENTS=true
          export CCACHE_LOGFILE="$CCACHE_DIR/ccache_log.txt"
          export CCACHE_STATSLOG="$CCACHE_DIR/ccache_statslog.txt"
          export CCACHE_SLOPPINESS="file_stat_matches_ctime,include_file_ctime,include_file_mtime,time_macros"
          ccache -s -vv -x --show-config
          cmake --install "$(cat current_build_dir)"

      - name: show cache state
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          export PATH="$(pwd)/ccache_bin:$PATH"
          export CCACHE_DIR="$(cat current_cache_dir)"
          export CCACHE_DEBUG=true
          export CCACHE_COMMENTS=true
          export CCACHE_LOGFILE="$CCACHE_DIR/ccache_log.txt"
          export CCACHE_STATSLOG="$CCACHE_DIR/ccache_statslog.txt"
          export CCACHE_SLOPPINESS="file_stat_matches_ctime,include_file_ctime,include_file_mtime,time_macros"
          ccache -s -vv -x --show-config

      - name: list cache dir
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          export PATH="$(pwd)/ccache_bin:$PATH"
          export CCACHE_DIR="$(cat current_cache_dir)"
          export CCACHE_DEBUG=true
          export CCACHE_COMMENTS=true
          export CCACHE_LOGFILE="$CCACHE_DIR/ccache_log.txt"
          export CCACHE_STATSLOG="$CCACHE_DIR/ccache_statslog.txt"
          export CCACHE_SLOPPINESS="file_stat_matches_ctime,include_file_ctime,include_file_mtime,time_macros"
          ls -l "$CCACHE_DIR"

      - name: show cache log
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          export PATH="$(pwd)/ccache_bin:$PATH"
          export CCACHE_DIR="$(cat current_cache_dir)"
          export CCACHE_DEBUG=true
          export CCACHE_COMMENTS=true
          export CCACHE_LOGFILE="$CCACHE_DIR/ccache_log.txt"
          export CCACHE_STATSLOG="$CCACHE_DIR/ccache_statslog.txt"
          export CCACHE_SLOPPINESS="file_stat_matches_ctime,include_file_ctime,include_file_mtime,time_macros"
          cat "$CCACHE_LOGFILE" || true

      - name: show cache stats log
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          export PATH="$(pwd)/ccache_bin:$PATH"
          export CCACHE_DIR="$(cat current_cache_dir)"
          export CCACHE_DEBUG=true
          export CCACHE_COMMENTS=true
          export CCACHE_LOGFILE="$CCACHE_DIR/ccache_log.txt"
          export CCACHE_STATSLOG="$CCACHE_DIR/ccache_statslog.txt"
          export CCACHE_SLOPPINESS="file_stat_matches_ctime,include_file_ctime,include_file_mtime,time_macros"
          cat "$CCACHE_STATSLOG" || true

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          rm llvm_commits/llvm_commit_last
          cp llvm_commits/llvm_commit_current llvm_commits/llvm_commit_last

          # 750 mb
          #
          ./split_exe/split.exe --split -r llvm_commits --name llvm_commits --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l

      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - llvm commits - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_llvm_commits--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./llvm_commits.split.*

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r ccache_llvm --name ccache_llvm --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l

      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - llvm - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_llvm--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./ccache_llvm.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_clang --name build_clang --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_clang.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt --name build_compiler_rt --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - compiler-rt - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_compiler_rt--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_compiler_rt.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx --name build_libcxx --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libcxx - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libcxx--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxx.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi --name build_libcxxabi --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libcxxabi - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libcxxabi--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxxabi.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind --name build_libunwind --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libunwind - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libunwind--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libunwind.split.*

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  msys2_prebuilt_bootstrap_msys2_build_llvm_stage_2:
    needs: msys2_prebuilt_bootstrap_msys2_build_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 2
            llvm_stage_old: 1

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage ${{ matrix.llvm_stage }} (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          S=${{ matrix.llvm_stage }}
          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_llvm--release/build_llvm.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_clang--release/build_clang.split.map
          URL3=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_compiler_rt--release/build_compiler_rt.split.map
          URL4=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libcxx--release/build_libcxx.split.map
          URL5=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libcxxabi--release/build_libcxxabi.split.map
          URL6=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libunwind--release/build_libunwind.split.map
          URL7=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm || true
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_clang || true
          ./split_exe/split.exe --join -r $URL3 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt || true
          ./split_exe/split.exe --join -r $URL4 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx || true
          ./split_exe/split.exe --join -r $URL5 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi || true
          ./split_exe/split.exe --join -r $URL6 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind || true
          # always download the previous stage's build rootfs
          ./split_exe/split.exe --join -r $URL7 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          mv BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS ROOTFS

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm --name build_llvm --size 750000000

          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT
          mv ROOTFS BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - llvm - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_llvm--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_llvm.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_clang --name build_clang --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_clang.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt --name build_compiler_rt --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - compiler-rt - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_compiler_rt--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_compiler_rt.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx --name build_libcxx --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libcxx - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libcxx--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxx.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi --name build_libcxxabi --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libcxxabi - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libcxxabi--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxxabi.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind --name build_libunwind --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libunwind - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libunwind--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libunwind.split.*

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  msys2_prebuilt_bootstrap_msys2_build_llvm_stage_3:
    needs: msys2_prebuilt_bootstrap_msys2_build_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 3
            llvm_stage_old: 2

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage ${{ matrix.llvm_stage }} (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          S=${{ matrix.llvm_stage }}
          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_llvm--release/build_llvm.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_clang--release/build_clang.split.map
          URL3=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_compiler_rt--release/build_compiler_rt.split.map
          URL4=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libcxx--release/build_libcxx.split.map
          URL5=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libcxxabi--release/build_libcxxabi.split.map
          URL6=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-msys2_prebuilt_bootstrap_libunwind--release/build_libunwind.split.map
          URL7=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm || true
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_clang || true
          ./split_exe/split.exe --join -r $URL3 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt || true
          ./split_exe/split.exe --join -r $URL4 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx || true
          ./split_exe/split.exe --join -r $URL5 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi || true
          ./split_exe/split.exe --join -r $URL6 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind || true
          # always download the previous stage's build rootfs
          ./split_exe/split.exe --join -r $URL7 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          mv BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS ROOTFS

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm --name build_llvm --size 750000000

          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT
          mv ROOTFS BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - llvm - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_llvm--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_llvm.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_clang --name build_clang --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_clang.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_compiler_rt --name build_compiler_rt --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - compiler-rt - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_compiler_rt--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_compiler_rt.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxx --name build_libcxx --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libcxx - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libcxx--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxx.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libcxxabi --name build_libcxxabi --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libcxxabi - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libcxxabi--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxxabi.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_libunwind --name build_libunwind --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - libunwind - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap_libunwind--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libunwind.split.*

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

# clang 11 is too old, build via msys2_prebuilt_bootstrap (above) then rebuild with iconv via our build clang

  clang_msys2_build_deps:
    needs: msys2_prebuilt_bootstrap_msys2_build_llvm_stage_3
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 0
            llvm_stage_old: 3

    runs-on: ${{ matrix.os }}

    name: msys2 deps (clang) - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install autotools
        run: |
          pacman -S --noconfirm --needed autotools

      - name: install patch
        run: |
          pacman -S --noconfirm --needed patch

      - name: install gperf
        run: |
          pacman -S --noconfirm --needed gperf

      - name: install groff
        run: |
          pacman -S --noconfirm --needed groff

      - name: install gettext
        run: |
          pacman -S --noconfirm --needed gettext

      - name: install texinfo
        run: |
          pacman -S --noconfirm --needed texinfo

      - name: clone libiconv
        run: |
          export MSYS=winsymlinks:native
          find /usr/include -name error.h
          cd deps ; git clone git://git.savannah.gnu.org/libiconv.git libiconv --recursive --depth=1

      - name: libiconv autopull.sh
        run: |
          export MSYS=winsymlinks:native
          cd deps ; cd libiconv ; ./autopull.sh --one-time

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-clang--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_clang_llvm || true
          # download bootstrap clang
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: cmake build deps - Release
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          export c_compiler="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export source_dir="."
          export build_dir="BUILD_RELEASE_clang_llvm"
          echo "$build_dir" > current_build_dir
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_ICONV=TRUE -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_clang --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows msys2 clang - RELEASE"
          tag: "storage--deps--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  clang_msys2_build_llvm_stage_1:
    needs: clang_msys2_build_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 1
            llvm_stage_old: 0

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          S=${{ matrix.llvm_stage }}
          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_llvm--release/build_llvm.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_clang--release/build_clang.split.map
          URL3=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_compiler_rt--release/build_compiler_rt.split.map
          URL4=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libcxx--release/build_libcxx.split.map
          URL5=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libcxxabi--release/build_libcxxabi.split.map
          URL6=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libunwind--release/build_libunwind.split.map
          URL7=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map
          URL8=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-clang--release/build.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_clang_llvm || true
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_clang_clang || true
          ./split_exe/split.exe --join -r $URL3 --out BUILD_RELEASE_msys2_clang_compiler_rt || true
          ./split_exe/split.exe --join -r $URL4 --out BUILD_RELEASE_msys2_clang_libcxx || true
          ./split_exe/split.exe --join -r $URL5 --out BUILD_RELEASE_msys2_clang_libcxxabi || true
          ./split_exe/split.exe --join -r $URL6 --out BUILD_RELEASE_msys2_clang_libunwind || true
          # download bootstrap clang
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL7 --out BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS
          # always download the previous stage's build rootfs
          ./split_exe/split.exe --join -r $URL8 --out BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="BUILD_RELEASE_msys2_clang_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          mv BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS ROOTFS

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_llvm --name build_llvm --size 750000000

          mkdir BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT
          mv ROOTFS BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - llvm - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_llvm--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_llvm.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="BUILD_RELEASE_msys2_clang_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_clang --name build_clang --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_clang.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="BUILD_RELEASE_msys2_clang_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_compiler_rt --name build_compiler_rt --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - compiler-rt - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_compiler_rt--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_compiler_rt.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="BUILD_RELEASE_msys2_clang_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libcxx --name build_libcxx --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libcxx - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libcxx--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxx.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="BUILD_RELEASE_msys2_clang_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libcxxabi --name build_libcxxabi --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libcxxabi - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libcxxabi--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxxabi.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="BUILD_RELEASE_msys2_clang_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libunwind --name build_libunwind --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libunwind - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libunwind--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libunwind.split.*

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  clang_msys2_build_llvm_stage_2:
    needs: clang_msys2_build_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 2
            llvm_stage_old: 1

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          S=${{ matrix.llvm_stage }}
          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_llvm--release/build_llvm.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_clang--release/build_clang.split.map
          URL3=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_compiler_rt--release/build_compiler_rt.split.map
          URL4=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libcxx--release/build_libcxx.split.map
          URL5=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libcxxabi--release/build_libcxxabi.split.map
          URL6=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libunwind--release/build_libunwind.split.map
          URL7=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S0--windows-msys2-clang--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_clang_llvm || true
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_clang_clang || true
          ./split_exe/split.exe --join -r $URL3 --out BUILD_RELEASE_msys2_clang_compiler_rt || true
          ./split_exe/split.exe --join -r $URL4 --out BUILD_RELEASE_msys2_clang_libcxx || true
          ./split_exe/split.exe --join -r $URL5 --out BUILD_RELEASE_msys2_clang_libcxxabi || true
          ./split_exe/split.exe --join -r $URL6 --out BUILD_RELEASE_msys2_clang_libunwind || true
          # always download the previous stage's build rootfs
          ./split_exe/split.exe --join -r $URL8 --out BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="BUILD_RELEASE_msys2_clang_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          mv BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS ROOTFS

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_llvm --name build_llvm --size 750000000

          mkdir BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT
          mv ROOTFS BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - llvm - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_llvm--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_llvm.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="BUILD_RELEASE_msys2_clang_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_clang --name build_clang --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_clang.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="BUILD_RELEASE_msys2_clang_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_compiler_rt --name build_compiler_rt --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - compiler-rt - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_compiler_rt--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_compiler_rt.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="BUILD_RELEASE_msys2_clang_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libcxx --name build_libcxx --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libcxx - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libcxx--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxx.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="BUILD_RELEASE_msys2_clang_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libcxxabi --name build_libcxxabi --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libcxxabi - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libcxxabi--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxxabi.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="BUILD_RELEASE_msys2_clang_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libunwind --name build_libunwind --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libunwind - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libunwind--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libunwind.split.*

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  clang_msys2_build_llvm_stage_3:
    needs: clang_msys2_build_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 3
            llvm_stage_old: 2

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar




      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          S=${{ matrix.llvm_stage }}
          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_llvm--release/build_llvm.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_clang--release/build_clang.split.map
          URL3=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_compiler_rt--release/build_compiler_rt.split.map
          URL4=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libcxx--release/build_libcxx.split.map
          URL5=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libcxxabi--release/build_libcxxabi.split.map
          URL6=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_libunwind--release/build_libunwind.split.map
          URL7=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_clang_tools_extra--release/build_clang_tools_extra.split.map
          URL8=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_lld--release/build_lld.split.map
          URL9=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_lldb--release/build_lldb.split.map
          URL10=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_mlir--release/build_mlir.split.map
          URL11=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S--windows-msys2-clang_polly--release/build_polly.split.map
          URL12=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$S0--windows-msys2-clang--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_clang_llvm || true
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_clang_clang || true
          ./split_exe/split.exe --join -r $URL3 --out BUILD_RELEASE_msys2_clang_compiler_rt || true
          ./split_exe/split.exe --join -r $URL4 --out BUILD_RELEASE_msys2_clang_libcxx || true
          ./split_exe/split.exe --join -r $URL5 --out BUILD_RELEASE_msys2_clang_libcxxabi || true
          ./split_exe/split.exe --join -r $URL6 --out BUILD_RELEASE_msys2_clang_libunwind || true
          ./split_exe/split.exe --join -r $URL7 --out BUILD_RELEASE_msys2_clang_clang_tools_extra || true
          ./split_exe/split.exe --join -r $URL8 --out BUILD_RELEASE_msys2_clang_lld || true
          ./split_exe/split.exe --join -r $URL9 --out BUILD_RELEASE_msys2_clang_lldb || true
          ./split_exe/split.exe --join -r $URL10 --out BUILD_RELEASE_msys2_clang_mlir || true
          ./split_exe/split.exe --join -r $URL11 --out BUILD_RELEASE_msys2_clang_polly || true
          # always download the previous stage's build rootfs
          ./split_exe/split.exe --join -r $URL12 --out BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="BUILD_RELEASE_msys2_clang_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          mv BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS ROOTFS

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_llvm --name build_llvm --size 750000000

          mkdir BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT
          mv ROOTFS BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - llvm - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_llvm--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_llvm.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="BUILD_RELEASE_msys2_clang_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_clang --name build_clang --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_clang.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="BUILD_RELEASE_msys2_clang_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_compiler_rt --name build_compiler_rt --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - compiler-rt - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_compiler_rt--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_compiler_rt.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="BUILD_RELEASE_msys2_clang_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libcxx --name build_libcxx --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libcxx - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libcxx--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxx.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="BUILD_RELEASE_msys2_clang_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libcxxabi --name build_libcxxabi --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libcxxabi - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libcxxabi--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libcxxabi.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="BUILD_RELEASE_msys2_clang_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_libunwind --name build_libunwind --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - libunwind - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_libunwind--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_libunwind.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/clang-tools-extra"
          export build_dir="BUILD_RELEASE_clang_clang_tools_extra"
          export llvm_projects="clang-tools-extra"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_clang_tools_extra --name build_clang_tools_extra --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - clang-tools-extra - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_clang_tools_extra--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_clang_tools_extra.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/lld"
          export build_dir="BUILD_RELEASE_clang_lld"
          export llvm_projects="lld"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_lld --name build_lld --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - lld - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_lld--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_lld.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/lldb"
          export build_dir="BUILD_RELEASE_clang_lldb"
          export llvm_projects="lldb"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_lldb --name build_lldb --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - lldb - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_lldb--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_lldb.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/mlir"
          export build_dir="BUILD_RELEASE_clang_mlir"
          export llvm_projects="mlir"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_mlir --name build_mlir --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - mlir - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_mlir--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_mlir.split.*

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/BUILD_RELEASE_clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/polly"
          export build_dir="BUILD_RELEASE_clang_polly"
          export llvm_projects="polly"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build "$(cat current_build_dir)" -v

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_polly --name build_polly --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - polly - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang_polly--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build_polly.split.*

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

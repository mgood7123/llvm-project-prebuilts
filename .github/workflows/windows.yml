# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days


# llvm stage 1 builds llvm + clang, no runtimes
# llvm stage 2 rebuilds llvm + clang with the clang built from llvm stage 1
# llvm stage 3 rebuilds entire llvm with the clang built from llvm stage 2

# from llvm
#
# https://github.com/llvm/llvm-project/blob/main/llvm/utils/release/test-release.sh#L469
#
    # During the first two phases, there is no need to build any of the projects
    # except clang, since these phases are only meant to produce a bootstrapped
    # clang compiler, capable of building the third phase.
#
    # During the first phase, there is no need to build any of the runtimes,
    # since this phase is only meant to get a clang compiler, capable of
    # building itself and any selected runtimes in the second phase.
#
      # compiler-rt builtins is needed on AIX to have a functional Phase 1 clang.
#
# note github actions do NOT provide an AIX system so we do not need to check for the presense of such flag


name: windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: msys2 {0}

# each job runs under a NEW image
jobs:
  should_run:
    runs-on: ubuntu-latest
    name: should_i_run
    outputs:
      output1: ${{ steps.check.outputs.target_commit_id }}
    steps:
     - name: check
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ --std=c++17 -I jsoncons/include check.cpp -o check
         ./check 2 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] windows [4]
       shell: bash
  
  msys2_build_split:
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 split - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: install gcc
        run: |
          pacman -S --noconfirm --needed gcc

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install autotools
        run: |
          pacman -S --noconfirm --needed autotools

#'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; sh ./configure   --prefix=$(pwd)/ROOTFS --enable-static=yes --enable-shared=no'
#'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; make --trace'

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          cd split
          chmod +x ../try_get_release.sh
          ../try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split_build.tar || true

      - name: build split program
        run: |
          export MSYS=winsymlinks:native
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          chmod +x try_get_release.sh
          cd split
          chmod +x make.sh
          ./make.sh

      - name: archive split build directory
        run: |
          export MSYS=winsymlinks:native
          cd split
          # we need only the rootfs in the next stage
          cp /usr/bin/msys-2.0.dll BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin
          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
          tar -cf split_build.tar BUILD_DEBUG
          sha512sum split_build.tar > split_build.tar.sha512
          rm -rf BUILD_DEBUG
          # preserve the directory structure
          mkdir BUILD_DEBUG
          mkdir BUILD_DEBUG/BUILD_ROOT
          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
          tar -cf split_rootfs.tar BUILD_DEBUG
          sha512sum split_rootfs.tar > split_rootfs.tar.sha512
          cd ..
          mkdir split_exe
          cp split/BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin/split.exe split_exe
          cp /usr/bin/msys-2.0.dll split_exe
          tar -cf split.exe.tar split_exe
          sha512sum split.exe.tar > split.exe.tar.sha512
          rm -rf split/BUILD_DEBUG
          rm -rf split_exe
          tar -xf split.exe.tar
          echo "checking if packaged split.exe works"
          ./split_exe/split.exe
          echo "packaged split.exe works"

      - name: list files
        run: |
          ls -l
      
      - name: upload split build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "split"
          tag: "storage--split--windows"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./split/split_build.tar
            ./split/split_build.tar.sha512
            ./split/split_rootfs.tar
            ./split/split_rootfs.tar.sha512
            ./split.exe.tar
            ./split.exe.tar.sha512

  # 'libedit not fully ported to win32 yet, lldb will be broken'
  win32_build_deps:
    if: false
    needs: msys2_build_split
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: clang64

    runs-on: ${{ matrix.os }}

    name: win32 deps - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install pacboy
        run: |
          pacman -Syu --noconfirm --needed pactoys

      - name: update packages
        run: |
          pacboy -Sy

      - name: install git
        run: |
          pacboy -S --noconfirm --needed git

      - name: install findutils
        run: |
          pacboy -S --noconfirm --needed findutils

      - name: install clang 17
        run: |
          pacboy -S --noconfirm --needed clang:p

      - name: install cmake
        run: |
          pacboy -S --noconfirm --needed make:p cmake:p

      - name: install autotools
        run: |
          pacboy -S --noconfirm --needed autotools:p

      - name: install patch
        run: |
          pacboy -S --noconfirm --needed patch

      - name: install gperf
        run: |
          pacboy -S --noconfirm --needed gperf:p

      - name: install groff
        run: |
          pacboy -S --noconfirm --needed groff

      - name: install gettext
        run: |
          pacboy -S --noconfirm --needed gettext

      - name: install texinfo
        run: |
          pacboy -S --noconfirm --needed texinfo

      - name: clone libiconv
        run: |
          export MSYS=winsymlinks:native
          cd deps ; git clone git://git.savannah.gnu.org/libiconv.git libiconv --recursive --depth=1

      - name: libiconv autopull.sh
        run: |
          export MSYS=winsymlinks:native
          cd deps ; cd libiconv ; ./autopull.sh --one-time

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows--release/build.split.map
          ./split_exe/split.exe --join -r $URL --out BUILD_RELEASE || true

      - name: cmake build deps - Release
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)

          # clang64 provides nanosleep in /clang64/lib/libpthread.a
          export cf_cv_func_nanosleep=yes

          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S . -B BUILD_RELEASE

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows - RELEASE"
          tag: "storage--deps--windows--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  win32_build_llvm_stage_1:
    needs: win32_build_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: clang64

    runs-on: ${{ matrix.os }}

    name: win32 llvm stage 1 - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install pacboy
        run: |
          pacman -Syu --noconfirm --needed pactoys

      - name: update packages
        run: |
          pacboy -Sy

      - name: install findutils
        run: |
          pacboy -S --noconfirm --needed findutils

      - name: install clang 17
        run: |
          pacboy -S --noconfirm --needed clang:p

      - name: install cmake
        run: |
          pacboy -S --noconfirm --needed make:p cmake:p

      - name: install git
        run: |
          pacboy -S --noconfirm --needed git

      - name: install ncurses
        run: |
          pacboy -S --noconfirm --needed ncurses ncurses:p ncurses-devel

      - name: install python
        run: |
          pacboy -S --noconfirm --needed python-devel

      - name: install swig
        run: |
          pacboy -S --noconfirm --needed swig

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-1--windows--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows--release/rootfs.split.map

          if ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE
            then
              true;
            else
              mkdir BUILD_RELEASE/BUILD_ROOT
              ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE/BUILD_ROOT/ROOTFS
          fi

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 1 - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;" -DLLVM_ENABLE_RUNTIMES="" -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_RELEASE/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_RELEASE/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S llvm-project/llvm -B BUILD_RELEASE

      - name: cmake LLVM STAGE 1 - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_RELEASE

      - name: cmake LLVM STAGE 1 - Release - Install
        run: |
          export MSYS=winsymlinks:native
          cmake --install BUILD_RELEASE

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage 1 - windows - RELEASE"
          tag: "storage--llvm-stage-1--windows--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  win32_build_llvm_stage_2:
    needs: win32_build_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: clang64

    runs-on: ${{ matrix.os }}

    name: win32 llvm stage 2 - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

  win32_build_llvm_stage_3:
    needs: win32_build_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: clang64

    runs-on: ${{ matrix.os }}

    name: win32 llvm stage 3 - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore
































































































# clang 11 is too old to build iconv, build without iconv then rebuild via clang

  msys2_prebuilt_bootstrap_msys2_build_deps:
    needs: msys2_build_split
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 deps (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install rootfs
        run: |
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS
          pacman -S --noconfirm --needed --dir "$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS" libarchive libarchive-devel ncurses ncurses-devel libedit libedit-devel libxml2 libxml2-devel zlib zlib-devel libzstd libzstd-devel liblz4 liblz4-devel liblzma liblzma-devel libxxhash libxxhash-devel libiconv libiconv-devel openssl openssl-devel libexpat libexpat-devel liblzo2 liblzo2-devel

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--deps--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  msys2_prebuilt_bootstrap_msys2_build_llvm_stage_1:
    needs: msys2_prebuilt_bootstrap_msys2_build_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage 1 (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install clang
        run: |
          pacman -S --noconfirm --needed clang

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-1--windows-msys2-msys2_prebuilt_bootstrap--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_prebuilt_bootstrap || true
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 1 - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;" -DLLVM_ENABLE_RUNTIMES="" -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S llvm-project/llvm -B BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: cmake LLVM STAGE 1 - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: cmake LLVM STAGE 1 - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage 1 - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--llvm-stage-1--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  msys2_prebuilt_bootstrap_msys2_build_llvm_stage_2:
    needs: msys2_prebuilt_bootstrap_msys2_build_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage 2 (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install clang
        run: |
          pacman -S --noconfirm --needed clang

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-2--windows-msys2-msys2_prebuilt_bootstrap--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-1--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_prebuilt_bootstrap || true
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 2 - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_ENABLE_RUNTIMES="" -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS/bin/clang -DCMAKE_CXX_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS/bin/clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S llvm-project/llvm -B BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: cmake LLVM STAGE 2 - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: cmake LLVM STAGE 2 - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage 2 - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--llvm-stage-2--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  msys2_prebuilt_bootstrap_msys2_build_llvm_stage_3:
    needs: msys2_prebuilt_bootstrap_msys2_build_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage 3 (msys2_prebuilt_bootstrap) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install clang
        run: |
          pacman -S --noconfirm --needed clang

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-3--windows-msys2-msys2_prebuilt_bootstrap--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-2--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_msys2_prebuilt_bootstrap || true
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 3 - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb;mlir;polly" -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS/bin/clang -DCMAKE_CXX_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap3/BUILD_ROOT/ROOTFS/bin/clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S llvm-project/llvm -B BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: cmake LLVM STAGE 3 - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: cmake LLVM STAGE 3 - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install BUILD_RELEASE_msys2_prebuilt_bootstrap

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_msys2_prebuilt_bootstrap --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage 3 - windows msys2 msys2_prebuilt_bootstrap - RELEASE"
          tag: "storage--llvm-stage-3--windows-msys2-msys2_prebuilt_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

# clang 11 is too old, build via msys2_prebuilt_bootstrap (above) then rebuild with iconv via our build clang

  clang_msys2_build_deps:
    needs: msys2_prebuilt_bootstrap_msys2_build_llvm_stage_3
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 deps (clang) - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install autotools
        run: |
          pacman -S --noconfirm --needed autotools

      - name: install patch
        run: |
          pacman -S --noconfirm --needed patch

      - name: install gperf
        run: |
          pacman -S --noconfirm --needed gperf

      - name: install groff
        run: |
          pacman -S --noconfirm --needed groff

      - name: install gettext
        run: |
          pacman -S --noconfirm --needed gettext

      - name: install texinfo
        run: |
          pacman -S --noconfirm --needed texinfo

      - name: clone libiconv
        run: |
          export MSYS=winsymlinks:native
          find /usr/include -name error.h
          cd deps ; git clone git://git.savannah.gnu.org/libiconv.git libiconv --recursive --depth=1

      - name: libiconv autopull.sh
        run: |
          export MSYS=winsymlinks:native
          cd deps ; cd libiconv ; ./autopull.sh --one-time

#'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; sh ./configure   --prefix=$(pwd)/ROOTFS --enable-static=yes --enable-shared=no'
#'sh' '-c' 'export PKG_CONFIG_PATH="$(pwd)/ROOTFS/lib/pkgconfig:$(pwd)/ROOTFS/share/pkgconfig:$PKG_CONFIG_PATH" ; export CC="/usr/bin/clang.exe" ; export LDFLAGS="-L$(pwd)/ROOTFS/lib" ; export CFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; export CXX="/usr/bin/clang++.exe" ; export CXXFLAGS="-I$(pwd)/ROOTFS/include -L$(pwd)/ROOTFS/lib   -g0 -O3" ; make --trace'

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-clang--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-3--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_CLANG || true
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS

      - name: cmake build deps - Release
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_ICONV=TRUE -DCMAKE_C_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS/bin/clang -DCMAKE_CXX_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS/bin/clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S . -B BUILD_RELEASE_CLANG

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows msys2 clang - RELEASE"
          tag: "storage--deps--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  clang_msys2_build_llvm_stage_1:
    needs: clang_msys2_build_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage 1 (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install clang
        run: |
          pacman -S --noconfirm --needed clang

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-1--windows-msys2-clang--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-clang--release/rootfs.split.map
          URL3=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-3--windows-msys2-msys2_prebuilt_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_CLANG || true
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_CLANG/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap
          mkdir BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL3 --out BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 1 - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;" -DLLVM_ENABLE_RUNTIMES="" -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS/bin/clang -DCMAKE_CXX_COMPILER=$(pwd)/BUILD_RELEASE_msys2_prebuilt_bootstrap/BUILD_ROOT/ROOTFS/bin/clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S llvm-project/llvm -B BUILD_RELEASE_CLANG

      - name: cmake LLVM STAGE 1 - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_RELEASE_CLANG

      - name: cmake LLVM STAGE 1 - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install BUILD_RELEASE_CLANG

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage 1 - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-1--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  clang_msys2_build_llvm_stage_2:
    needs: clang_msys2_build_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage 2 (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install clang
        run: |
          pacman -S --noconfirm --needed clang

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-2--windows-msys2-clang--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-1--windows-msys2-clang--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_CLANG || true
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_CLANG/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 2 - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;" -DLLVM_ENABLE_RUNTIMES="" -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS/bin/clang -DCMAKE_CXX_COMPILER=$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS/bin/clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S llvm-project/llvm -B BUILD_RELEASE_CLANG

      - name: cmake LLVM STAGE 2 - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_RELEASE_CLANG

      - name: cmake LLVM STAGE 2 - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install BUILD_RELEASE_CLANG

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage 2 - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-2--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  clang_msys2_build_llvm_stage_3:
    needs: clang_msys2_build_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 llvm stage 3 (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install clang
        run: |
          pacman -S --noconfirm --needed clang

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-3--windows-msys2-clang--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-2--windows-msys2-clang--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out BUILD_RELEASE_CLANG || true
          # always download the previous stage's build rootfs
          mkdir BUILD_RELEASE_CLANG/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS

      - name: clone llvm-project
        run: |
          git clone --depth=1 --recursive https://github.com/llvm/llvm-project

      - name: cmake LLVM STAGE 3 - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb;mlir;polly" -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS" -DLLVM_BUILD_ROOT__ROOTFS="$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS/bin/clang -DCMAKE_CXX_COMPILER=$(pwd)/BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS/bin/clang++ -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S llvm-project/llvm -B BUILD_RELEASE_CLANG

      - name: cmake LLVM STAGE 3 - Release - Build
        run: |
          export MSYS=winsymlinks:native
          cmake --build BUILD_RELEASE_CLANG

      - name: cmake LLVM STAGE 3 - Release - Install
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install BUILD_RELEASE_CLANG

      - name: archive build directory
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG/BUILD_ROOT/ROOTFS --name rootfs --size 750000000

          # 750 mb
          #
          ./split_exe/split.exe --split -r BUILD_RELEASE_CLANG --name build --size 750000000

      - name: list files
        if: success() # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: success() # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage 3 - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-3--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

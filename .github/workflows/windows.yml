# Job execution time - Each job in a workflow can run for up to 6 hours of execution time.
# Workflow run time - Each workflow run is limited to 35 days


# llvm stage 1 builds llvm + clang, no runtimes
# llvm stage 2 rebuilds llvm + clang with the clang built from llvm stage 1
# llvm stage 3 rebuilds entire llvm with the clang built from llvm stage 2

# from llvm
#
# https://github.com/llvm/llvm-project/blob/main/llvm/utils/release/test-release.sh#L469

    # During the first two phases, there is no need to build any of the projects
    # except clang, since these phases are only meant to produce a bootstrapped
    # clang compiler, capable of building the third phase.

    # During the first phase, there is no need to build any of the runtimes,
    # since this phase is only meant to get a clang compiler, capable of
    # building itself and any selected runtimes in the second phase.

      # compiler-rt builtins is needed on AIX to have a functional Phase 1 clang.

#
# note github actions do NOT provide an AIX system so we do not need to check for the presense of such flag
#
# we must define   -D__POSIX_VISIBLE=200809 since strnlen is ifdef'd
#
# however strlen gets defined if we use --std=gnu++11 or higher (GNU extensions)
#
# unfortunately this does not appear to work even tho https://man7.org/linux/man-pages/man3/strnlen.3.html
#
# llvm-project/clang/lib/Lex/HeaderMap.cpp:158:18: error: ‘strnlen’ was not declared in this scope; did you mean ‘strlen’?
#
#    158 |   unsigned Len = strnlen(Data, MaxLen);
#
# $ grep -rin strnlen /usr/include
# /usr/include/cygwin/version.h:126:            on_exit setbuffer setlinebuf strndup strnlen tdelete tdestroy
# /usr/include/libiberty/libiberty.h:685:#if defined (HAVE_DECL_STRNLEN) && !HAVE_DECL_STRNLEN
# /usr/include/libiberty/libiberty.h:686:extern size_t strnlen (const char *, size_t);
# /usr/include/llvm/Analysis/TargetLibraryInfo.def:1306:/// size_t strnlen(const char *s, size_t maxlen);
# /usr/include/llvm/Analysis/TargetLibraryInfo.def:1307:TLI_DEFINE_ENUM_INTERNAL(strnlen)
# /usr/include/llvm/Analysis/TargetLibraryInfo.def:1308:TLI_DEFINE_STRING_INTERNAL("strnlen")
# /usr/include/llvm/Analysis/TargetLibraryInfo.h:356:    case LibFunc_strnlen:      case LibFunc_memchr:     case LibFunc_mempcpy:
# /usr/include/llvm/CodeGen/SelectionDAGTargetInfo.h:144:  EmitTargetCodeForStrnlen(SelectionDAG &DAG, const SDLoc &DL, SDValue Chain,
# /usr/include/llvm/Transforms/Utils/BuildLibCalls.h:57:  /// Emit a call to the strnlen function to the builder, for the specified
# /usr/include/llvm/Transforms/Utils/BuildLibCalls.h:60:  Value *emitStrNLen(Value *Ptr, Value *MaxLen, IRBuilderBase &B,
# /usr/include/string.h:119:size_t         strnlen (const char *, size_t);
# /usr/include/string.h:153:                       size_t __len = strnlen (__sin, (__n)) + 1; \
# /usr/include/w32api/tchar.h:613:#define _tcsnlen strnlen
# /usr/include/w32api/tchar.h:1033:#define _tcscnlen strnlen
# /usr/include/w32api/tchar.h:1035:#define _tcscnlen_l(_String,_Max_count,_Locale) strnlen_l((_String),(_Max_count))
#
# $ cat -n /usr/include/string.h
# ...
#    118  #if __POSIX_VISIBLE >= 200809
#    119  size_t   strnlen (const char *, size_t);
#    120  #endif
# ...
#    145  #if __GNU_VISIBLE && defined(__GNUC__)
#    146  #define strdupa(__s) \
# ...
#    151  #define strndupa(__s, __n) \
# ...
#    153                           size_t __len = strnlen (__sin, (__n)) + 1; \
# ...
#    157  #endif /* __GNU_VISIBLE && __GNUC__ */
#
#
#
# as a workaround, it appears we can define '_GNU_SOURCE' to get this to build even with -D_GNU_SOURCE
#
# $ g++ -D_GNU_SOURCE -D_GNU_SOURCE test.cpp -o test && ./test.exe ; echo $?
# 4
# 
# $ g++ -D_GNU_SOURCE test.cpp -o test && ./test.exe ; echo $?
# test.cpp: In function ‘int main()’:
# test.cpp:4:12: error: ‘strnlen’ was not declared in this scope; did you mean ‘strlen’?
#     4 |     return strnlen("abcd", 5);
#       |            ^~~~~~~
#       |            strlen
# 1
#
#
# unfortunately this breaks std::tuple
#
# error: no matching function for call to ‘std::tuple<int, char [4096]>::tuple(const int&, const char [4096])’
#
# another workaround is to set `-DCMAKE_C_EXTENSIONS=ON -DCMAKE_CXX_EXTENSIONS=ON` in `cmake` flags

#
# based on the following, it appears we can export certain environmental variables as job/step outputs and then use them in conditional checks
#
# it also appears we can schedule workflows to be executed repeatedly according to 'cron' semantics
#

# https://stackoverflow.com/questions/67486910/how-can-i-easily-make-github-actions-skip-subsequent-jobs-execution-on-certain-c
#
# nightly build
#
#on:
#  workflow_dispatch:
#  schedule:
#    - cron: "0 1 * * *"  
#jobs:
#  check-if-there-are-commits:
#    outputs:
#      alive: ${{ steps.check.outputs.alive }}
#    steps:
#
#      - name: Activity check
#        id: "check"
#        run: |
#          alive=0
#
#          ...
#
#            alive=1
#
#  https://crontab.guru  can be used for the chrontab format used by chron
#
#   0 0 * * 1  
#     run every week at 00:00 monday
#
#  release:
#    needs: check-if-there-are-commits
#    if: ${{ needs.check-if-there-are-commits.outputs.alive == 'true' }}
#
#  deploy:
#    needs: release
#    if: ${{ needs.check-if-there-are-commits.outputs.alive == 'true' }}
#

# msys2 clang 11 is too old to build iconv, pre-package system libs into rootfs
# msys2 clang 11 lacks stdc++ headers, build bootstrap stage 3 with gcc then rebuild real clang via bootstrap clang

# build order:
#
# due to ~150 GB space, we cannot install clang from stage 3 as a system and use it to rebuild clang
# since we must be able to package between stages and we cannot package the root directory /
# so instead we build with runtimes in each stage so the runtimes persist between each stage
# while also getting more and more optimized with each subsequent stage
#
# due to 65k symbols per-dll PE limitation, we always build with -DCMAKE_BUILD_SHARED_LIBS=ON to build everything
# as a dll instead of an object archive, until the [hidden] attribute gets implemented for MSYS2/CYGWIN
#
# we avoid testing since git main branches are typically unstable and may fail at any time in any test
# we only care that everything compiles successfully and need not run tests
#
#   the gcc stage 1 root fs without runtimes and X86 only target and no plugin exports is 7.4 GB
#   the gcc stage 1 build without runtimes and X86 only target and no plugin exports is 10 GB
#
#   gcc
#     // build with gcc
#       install required deps into rootfs via pacman and package
#       clang      + runtimes - stage 1 - DLL everything
#       clang      + runtimes - stage 2 - DLL everything
#       everything + runtimes - stage 3 - DLL everything
#         // build with stage 3 clang that we had just built
#           build required deps and package
#           clang      + runtimes - stage 1 - DLL everything
#           clang      + runtimes - stage 2 - DLL everything
#           everything + runtimes - stage 3 - DLL everything
#             // build with stage 3 clang that we had just built
#               build required deps and package
#               clang      + runtimes - stage 1 - DLL everything
#               clang      + runtimes - stage 2 - DLL everything
#               everything + runtimes - stage 3 - DLL everything
#   prebuilt-gcc
#         // build with stage 3 clang that we had just built
#           build required deps and package
#           clang      + runtimes - stage 1 - DLL everything
#           clang      + runtimes - stage 2 - DLL everything
#           everything + runtimes - stage 3 - DLL everything
#             // build with stage 3 clang that we had just built
#               build required deps and package
#               clang      + runtimes - stage 1 - DLL everything
#               clang      + runtimes - stage 2 - DLL everything
#               everything + runtimes - stage 3 - DLL everything
#   prebuilt-clang
#             // build with stage 3 clang that we had just built
#               build required deps and package
#               clang      + runtimes - stage 1 - DLL everything
#               clang      + runtimes - stage 2 - DLL everything
#               everything + runtimes - stage 3 - DLL everything

name: windows

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

defaults:
  run:
    shell: msys2 {0}

# each job runs under a NEW image
jobs:
  should_run:
    runs-on: ubuntu-latest
    name: should_i_run
    steps:
     - name: check
       run: |
         wget https://gist.github.com/mgood7123/47957c59a4b0cbda11875632ee0b8f15/raw/7e876a60f2735cf7e60150a9a29edf6ddaad20a8/check.cpp -O check.cpp
         cat << EOF > data.json
         ${{toJSON(github.event.commits.*)}}
         EOF
         cat -n data.json
         git clone https://github.com/danielaparker/jsoncons --depth=1
         g++ -D_GNU_SOURCE -I jsoncons/include check.cpp -o check
         echo "checking"
         ./check 2 >> "$GITHUB_OUTPUT" # check for android [1] windows [2] linux [3] windows [4]
         echo "checked"
       shell: bash
  
  msys2_build_split:
    needs: should_run
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: msys2 split - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install packages
        run: |
          pacman -S --noconfirm --needed git gcc make cmake ninja python autotools

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          cd split
          chmod +x ../try_get_release.sh
          ../try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split_build.tar || true

      - name: build split program
        run: |
          export MSYS=winsymlinks:native
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          chmod +x try_get_release.sh
          cd split
          chmod +x make.sh
          ./make.sh

      - name: archive split build directory
        run: |
          export MSYS=winsymlinks:native
          cd split
          # we need only the rootfs in the next stage
          cp /usr/bin/msys-2.0.dll BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin
          mv BUILD_DEBUG/BUILD_ROOT/ROOTFS .
          tar -cf split_build.tar BUILD_DEBUG
          sha512sum split_build.tar > split_build.tar.sha512
          rm -rf BUILD_DEBUG
          # preserve the directory structure
          mkdir BUILD_DEBUG
          mkdir BUILD_DEBUG/BUILD_ROOT
          mv ROOTFS BUILD_DEBUG/BUILD_ROOT
          tar -cf split_rootfs.tar BUILD_DEBUG
          sha512sum split_rootfs.tar > split_rootfs.tar.sha512
          cd ..
          mkdir split_exe
          cp split/BUILD_DEBUG/BUILD_ROOT/ROOTFS/bin/split.exe split_exe
          cp /usr/bin/msys-2.0.dll split_exe
          tar -cf split.exe.tar split_exe
          sha512sum split.exe.tar > split.exe.tar.sha512
          rm -rf split/BUILD_DEBUG
          rm -rf split_exe
          tar -xf split.exe.tar
          echo "checking if packaged split.exe works"
          ./split_exe/split.exe
          echo "packaged split.exe works"

      - name: list files
        run: |
          ls -l
      
      - name: upload split build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "split"
          tag: "storage--split--windows"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./split/split_build.tar
            ./split/split_build.tar.sha512
            ./split/split_rootfs.tar
            ./split/split_rootfs.tar.sha512
            ./split.exe.tar
            ./split.exe.tar.sha512

  prepare_llvm_repo:
    needs: msys2_build_split
    # so we can upload releases
    permissions:
      contents: write
    outputs:
      must_pre_bootstrap: ${{ steps.must_pre_bootstrap.outputs.must_pre_bootstrap }}
      must_bootstrap:     ${{ steps.must_bootstrap.outputs.must_bootstrap }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS

    runs-on: ${{ matrix.os }}

    name: setup llvm-project - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if llvm commit information is cached
        run: |
          export MSYS=winsymlinks:native

          URL0=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_commits--release/llvm_commits.split.map

          ./split_exe/split.exe --join -r $URL0 --out llvm_commits || true

      - name: clone llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project || (
           # the repo does not exist yet, clone it now
           rm -rf llvm-project || true
           # no way to clone specific commit, we must clone entire commit history, which sucks but we dont have many other options
           echo "cloning llvm-project"
           git clone --recursive https://github.com/llvm/llvm-project
          )

      - name: pre-update llvm-project commit info
        id: "pre_commit"
        run: |
          init=1
          cd llvm-project
          git config --global color.ui never
          if [[ ! -e ../llvm_commits/llvm_commit_last ]]
            then
              echo "last commit does not exist"
              echo "setting current commit as last commit"
              git log --pretty=format:'%H' -n 1 > ../llvm_commits/llvm_commit_current
              git log --stat --date=relative --color -n 1 > ../llvm_commits/llvm_commit_current_verbose
              cp -v ../llvm_commits/llvm_commit_current ../llvm_commits/llvm_commit_last
              init=2
          fi
          git config --global color.ui always
          echo "init=$init" >> $GITHUB_OUTPUT

      - name: update llvm-project - fetch
        run: |
          # update repo
          cd llvm-project
          git config --global color.ui always
          echo "executing git fetch"
          git fetch > ../llvm_commits/llvm_commit_fetch_color
          cat ../llvm_commits/llvm_commit_fetch_color

      - name: update llvm-project - pull
        run: |
          # update repo
          cd llvm-project
          git config --global color.ui always
          echo "executing git pull"
          git pull > ../llvm_commits/llvm_commit_pull_color
          cat ../llvm_commits/llvm_commit_pull_color

      - name: pack llvm-project
        run: |
          echo "packing llvm repo"
          # 500 mb
          #
          ./split_exe/split.exe --split llvm-project --name llvm_git --size $((1024*1024*500))
          echo "packed llvm repo"

      - name: update llvm-project commit info
        run: |
          cd llvm-project
          git config --global color.ui never
          git log --pretty=format:'%H' -n 1 > ../llvm_commits/llvm_commit_current
          git log --stat --date=relative --color -n 1 > ../llvm_commits/llvm_commit_current_verbose
          git diff $(cat ../llvm_commits/llvm_commit_last)..$(cat ../llvm_commits/llvm_commit_current) --stat --date=relative > ../llvm_commits/llvm_commit_changed_files
          git log $(cat ../llvm_commits/llvm_commit_last)..$(cat ../llvm_commits/llvm_commit_current) --pretty=format:'%H' > ../llvm_commits/llvm_commit_diff
          git log $(cat ../llvm_commits/llvm_commit_last)..$(cat ../llvm_commits/llvm_commit_current) --stat --date=relative > ../llvm_commits/llvm_commit_diff_verbose
          git log $(cat ../llvm_commits/llvm_commit_last)..$(cat ../llvm_commits/llvm_commit_current) --date=relative -p > ../llvm_commits/llvm_commit_diff_verbose_changes
          git config --global color.ui always
          git diff $(cat ../llvm_commits/llvm_commit_last)..$(cat ../llvm_commits/llvm_commit_current) --stat --date=relative --color > ../llvm_commits/llvm_commit_changed_files_color
          git log $(cat ../llvm_commits/llvm_commit_last)..$(cat ../llvm_commits/llvm_commit_current) --stat --date=relative --color > ../llvm_commits/llvm_commit_diff_verbose_color
          git log $(cat ../llvm_commits/llvm_commit_last)..$(cat ../llvm_commits/llvm_commit_current) --date=relative -p --color > ../llvm_commits/llvm_commit_diff_verbose_changes_color

      - name: list commit current
        run: |
          echo "current commit:"
          cat llvm_commits/llvm_commit_current_verbose

      - name: list commit summary
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          NEW_COMMITS=$(cat llvm_commits/llvm_commit_diff | wc -w)
          if [[ "$NEW_COMMITS" == "0" ]]
            then
              echo "no new commits"
            else
              if [[ "$NEW_COMMITS" == "1" ]]
                then
                  echo "$NEW_COMMITS new commit has arrived"
                else
                  echo "$NEW_COMMITS new commits have arrived"
              fi
              echo
              echo
              echo "summary:"
              cat llvm_commits/llvm_commit_changed_files_color
          fi

      - name: list commit diff
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          NEW_COMMITS=$(cat llvm_commits/llvm_commit_diff | wc -w)
          if [[ "$NEW_COMMITS" == "0" ]]
            then
              echo "no new commits"
            else
              if [[ "$NEW_COMMITS" == "1" ]]
                then
                  echo "$NEW_COMMITS new commit has arrived"
                else
                  echo "$NEW_COMMITS new commits have arrived"
              fi
              echo
              echo
              echo "diff:"
              cat llvm_commits/llvm_commit_diff_verbose_color
          fi

      - name: check if we need to bootstrap clang
        run: |
          echo "1" > must_pre_bootstrap
          echo "1" > must_bootstrap
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-3--windows-msys2-clang--release/rootfs.split.map
          if ./split_exe/split.exe --ls $URL_LLVM
            then
              echo "final clang exists"
            else
              echo "final clang does not exist"
              URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-3--windows-msys2_bootstrap--release/rootfs.split.map
              if ./split_exe/split.exe --ls $URL_LLVM
                then
                  echo "bootstrap clang exists"
                  echo "2" > must_bootstrap
                else
                  echo "bootstrap clang does not exists"
                  echo "2" > must_pre_bootstrap
              fi
          fi

      - name: set output must_pre_bootstrap
        id: "must_pre_bootstrap"
        run: |
          set -x
          echo "must_pre_bootstrap=$(cat must_pre_bootstrap)" >> "$GITHUB_OUTPUT"

      - name: set output must_bootstrap
        id: "must_bootstrap"
        run: |
          set -x
          echo "must_bootstrap=$(cat must_bootstrap)" >> "$GITHUB_OUTPUT"

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l

      - name: upload llvm repo directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm-project git repo"
          tag: "storage--windows-llvm_git--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./llvm_git.split.*

      - name: archive tmp llvm commits directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r llvm_commits --name llvm_commits --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l

      - name: upload tmp llvm commits directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "windows - llvm commits (tmp) - RELEASE"
          tag: "storage--windows-llvm_commits_tmp--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./llvm_commits.split.*

      - name: upload llvm commits directory if initial download
        if: ${{ steps.pre_commit.outputs.init == '2' }}
        uses: "ncipollo/release-action@v1"
        with:
          name: "windows - llvm commits - RELEASE"
          tag: "storage--windows-llvm_commits--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./llvm_commits.split.*

  build_final_with:
    needs: prepare_llvm_repo
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build clang clang with - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s1_new_gcc_clang:
    needs: [prepare_llvm_repo,build_final_with]
    if: ${{ needs.prepare_llvm_repo.outputs.must_bootstrap == '1' && needs.prepare_llvm_repo.outputs.must_pre_bootstrap == '2' }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build final with new gcc clang - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s2_prebuilt_gcc_clang:
    needs: [prepare_llvm_repo,build_final_with]
    if: ${{ needs.prepare_llvm_repo.outputs.must_bootstrap == '2' && needs.prepare_llvm_repo.outputs.must_pre_bootstrap == '1' }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build final with prebuilt gcc clang - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s3_final:
    needs: [prepare_llvm_repo,build_final_with]
    if: ${{ needs.prepare_llvm_repo.outputs.must_bootstrap == '1' && needs.prepare_llvm_repo.outputs.must_pre_bootstrap == '1' }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build final with prebuilt clang stage 3 - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s1_clang:
    needs: s1_new_gcc_clang
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build clang stage 3 with new gcc clang - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s2_clang:
    needs: s2_prebuilt_gcc_clang
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build clang stage 3 with prebuilt gcc clang - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s3_clang:
    needs: s3_final
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build final with prebuilt clang stage 3 - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s2_clang_deps:
    needs: s2_clang
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build clang stage 3 with prebuilt gcc clang - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s3_clang_deps:
    needs: s3_clang
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build final with clang stage 3 - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s1_gcc_deps:
    needs: s1_clang
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 0
            llvm_stage_old: 0

    runs-on: ${{ matrix.os }}

    name: msys2 deps (msys2_bootstrap) - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: install rootfs
        run: |
          export MSYS=winsymlinks:native
          mkdir bootstrap_llvm
          mkdir bootstrap_llvm/BUILD_ROOT
          mkdir bootstrap_llvm/BUILD_ROOT/ROOTFS
          mkdir bootstrap_llvm/BUILD_ROOT/ROOTFS/tmp
          mkdir bootstrap_llvm/BUILD_ROOT/ROOTFS/var
          mkdir bootstrap_llvm/BUILD_ROOT/ROOTFS/var/lib
          mkdir bootstrap_llvm/BUILD_ROOT/ROOTFS/var/lib/pacman
          pacman -Sy --noconfirm --needed --root "$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          pacman -S --noconfirm --needed --root "$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS" bash
          pacman -S --noconfirm --needed --root "$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS" libarchive libarchive-devel ncurses ncurses-devel libedit libedit-devel libxml2 libxml2-devel zlib zlib-devel libzstd libzstd-devel liblz4 liblz4-devel liblzma liblzma-devel libxxhash libxxhash-devel libiconv libiconv-devel openssl openssl-devel libexpat libexpat-devel liblzo2 liblzo2-devel

      - name: archive build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r bootstrap_llvm/BUILD_ROOT/ROOTFS/usr --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows msys2 msys2_bootstrap - RELEASE"
          tag: "storage--deps--windows-msys2_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_gcc_llvm_stage_1:
    needs: s1_gcc_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 1
            llvm_stage_old: 0

    runs-on: ${{ matrix.os }}

    name: bootstrap llvm stage ${{ matrix.llvm_stage }} - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install gcc
        run: |
          pacman -S --noconfirm --needed gcc

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          # always download the previous stage's build rootfs
          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2_bootstrap--release/rootfs.split.map
          mkdir bootstrap_llvm
          mkdir bootstrap_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL --out bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "gcc" > c_compiler
          echo "g++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="bootstrap_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="bootstrap_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-D_GNU_SOURCE -g0 -O3" -DCMAKE_CXX_FLAGS="-D_GNU_SOURCE -g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="bootstrap_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DCOMPILER_RT_BUILD_ORC=OFF -DCOMPILER_RT_BAREMETAL_BUILD=ON -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="bootstrap_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="bootstrap_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="bootstrap_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r bootstrap_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_bootstrap - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_gcc_llvm_stage_2:
    needs: s1_gcc_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 2
            llvm_stage_old: 1

    runs-on: ${{ matrix.os }}

    name: bootstrap llvm stage ${{ matrix.llvm_stage }} - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: download stage ${{ matrix.llvm_stage_old }} rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2_bootstrap--release/rootfs.split.map

          mkdir bootstrap_llvm
          mkdir bootstrap_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL --out bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="bootstrap_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="bootstrap_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="bootstrap_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="bootstrap_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="bootstrap_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="bootstrap_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r bootstrap_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_bootstrap - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_gcc_llvm_stage_3:
    needs: s1_gcc_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 3
            llvm_stage_old: 2

    runs-on: ${{ matrix.os }}

    name: bootstrap llvm stage ${{ matrix.llvm_stage }} - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: download stage ${{ matrix.llvm_stage_old }} rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2_bootstrap--release/rootfs.split.map

          mkdir bootstrap_llvm
          mkdir bootstrap_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL --out bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="bootstrap_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="bootstrap_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="bootstrap_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="bootstrap_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="bootstrap_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="bootstrap_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r bootstrap_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 msys2_bootstrap - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2_bootstrap--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_gcc_clang_built:
    needs: s1_gcc_llvm_stage_3
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build clang stage 3 with gcc clang we built - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s1_clang_deps:
    needs: s1_gcc_clang_built
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 0
            llvm_stage_old: 3

    runs-on: ${{ matrix.os }}

    name: msys2 deps (clang) - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install autotools
        run: |
          pacman -S --noconfirm --needed autotools

      - name: install patch
        run: |
          pacman -S --noconfirm --needed patch

      - name: install gperf
        run: |
          pacman -S --noconfirm --needed gperf

      - name: install groff
        run: |
          pacman -S --noconfirm --needed groff

      - name: install gettext
        run: |
          pacman -S --noconfirm --needed gettext

      - name: install texinfo
        run: |
          pacman -S --noconfirm --needed texinfo

      - name: clone libiconv
        run: |
          export MSYS=winsymlinks:native
          find /usr/include -name error.h
          cd deps ; git clone git://git.savannah.gnu.org/libiconv.git libiconv --recursive --depth=1

      - name: libiconv autopull.sh
        run: |
          export MSYS=winsymlinks:native
          cd deps ; cd libiconv ; ./autopull.sh --one-time

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-clang--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2_bootstrap--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out clang_llvm || true
          # download bootstrap clang
          mkdir bootstrap_llvm
          mkdir bootstrap_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: cmake build deps - Release
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          export c_compiler="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export source_dir="."
          export build_dir="clang_llvm"
          echo "$build_dir" > current_build_dir
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_ICONV=TRUE -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: archive build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

          # 500 mb
          #
          ./split_exe/split.exe --split -r clang_llvm --name build --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows msys2 clang - RELEASE"
          tag: "storage--deps--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  s1_clang_llvm_stage_1:
    needs: s1_clang_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 1
            llvm_stage_old: 0

    runs-on: ${{ matrix.os }}

    name: llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: download deps and bootstrap stage 3 rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-clang--release/rootfs.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2_bootstrap--release/rootfs.split.map

          # download bootstrap deps
          mkdir clang_llvm
          mkdir clang_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL1 --out clang_llvm || true
          # download bootstrap clang
          mkdir bootstrap_llvm
          mkdir bootstrap_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out bootstrap_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/bootstrap_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="clang_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="clang_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="clang_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="clang_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="clang_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="clang_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_clang_llvm_stage_2:
    needs: s1_clang_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 2
            llvm_stage_old: 1

    runs-on: ${{ matrix.os }}

    name: llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: bootstrap stage ${{ matrix.llvm_stage_old }} rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-clang--release/rootfs.split.map

          # always download the previous stage's build rootfs
          mkdir clang_llvm
          mkdir clang_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL --out clang_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="clang_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="clang_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="clang_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="clang_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="clang_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} liibcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="clang_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_clang_llvm_stage_3:
    needs: s1_clang_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 3
            llvm_stage_old: 2

    runs-on: ${{ matrix.os }}

    name: llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: bootstrap stage ${{ matrix.llvm_stage_old }} rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-clang--release/rootfs.split.map

          # always download the previous stage's build rootfs
          mkdir clang_llvm
          mkdir clang_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL --out clang_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="clang_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="clang_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="clang_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="clang_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="clang_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="clang_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/clang-tools-extra"
          export build_dir="final_tools_extra"
          export llvm_projects="clang-tools-extra"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/lld"
          export build_dir="clang_lld"
          export llvm_projects="lld"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/lldb"
          export build_dir="clang_lldb"
          export llvm_projects="lldb"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/mlir"
          export build_dir="clang_mlir"
          export llvm_projects="mlir"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/polly"
          export build_dir="clang_polly"
          export llvm_projects="polly"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r clang_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 clang - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-clang--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_clang_stage_3_built:
    needs: s1_clang_llvm_stage_3
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: build final with clang stage 3 we built - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true

  s1_final_deps:
    needs: s1_clang_stage_3_built
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 0
            llvm_stage_old: 3

    runs-on: ${{ matrix.os }}

    name: msys2 deps (clang) - ${{ matrix.name }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          submodules: recursive

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install autotools
        run: |
          pacman -S --noconfirm --needed autotools

      - name: install patch
        run: |
          pacman -S --noconfirm --needed patch

      - name: install gperf
        run: |
          pacman -S --noconfirm --needed gperf

      - name: install groff
        run: |
          pacman -S --noconfirm --needed groff

      - name: install gettext
        run: |
          pacman -S --noconfirm --needed gettext

      - name: install texinfo
        run: |
          pacman -S --noconfirm --needed texinfo

      - name: clone libiconv
        run: |
          export MSYS=winsymlinks:native
          find /usr/include -name error.h
          cd deps ; git clone git://git.savannah.gnu.org/libiconv.git libiconv --recursive --depth=1

      - name: libiconv autopull.sh
        run: |
          export MSYS=winsymlinks:native
          cd deps ; cd libiconv ; ./autopull.sh --one-time

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: check if build directory is cached
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-final--release/build.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-clang--release/rootfs.split.map

          # download the build dir if it exists
          ./split_exe/split.exe --join -r $URL1 --out clang_llvm || true
          # download stage 3 clang
          mkdir final_llvm
          mkdir final_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out final_llvm/BUILD_ROOT/ROOTFS

      - name: cmake build deps - Release
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
          export c_compiler="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang"
          export cxx_compiler="$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++"
          export source_dir="."
          export build_dir="final_llvm"
          echo "$build_dir" > current_build_dir
          cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_ICONV=TRUE -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: archive build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r final_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

          # 500 mb
          #
          ./split_exe/split.exe --split -r final_llvm --name build --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload build directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm deps - windows msys2 final - RELEASE"
          tag: "storage--deps--windows-msys2-final--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./build.split.*
            ./rootfs.split.*

  s1_final_llvm_stage_1:
    needs: s1_final_deps
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 1
            llvm_stage_old: 0

    runs-on: ${{ matrix.os }}

    name: llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: download deps and bootstrap stage 3 rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL1=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--deps--windows-msys2-final--release/rootfs.split.map
          URL2=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-clang--release/rootfs.split.map

          # download bootstrap deps
          mkdir final_llvm
          mkdir final_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL1 --out final_llvm || true
          # download bootstrap clang
          mkdir clang_llvm
          mkdir clang_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL2 --out clang_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/clang_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="final_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="final_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="final_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="final_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="final_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="final_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r final_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 final - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-final--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_final_llvm_stage_2:
    needs: s1_final_llvm_stage_1
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 2
            llvm_stage_old: 1

    runs-on: ${{ matrix.os }}

    name: llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: bootstrap stage ${{ matrix.llvm_stage_old }} rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-final--release/rootfs.split.map

          # always download the previous stage's build rootfs
          mkdir final_llvm
          mkdir final_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL --out final_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/final_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/final_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="final_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="final_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="final_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="final_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="final_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="final_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r final_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 final - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-final--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

  s1_final_llvm_stage_3:
    needs: s1_final_llvm_stage_2
    # so we can upload releases
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
            sys: MSYS
            llvm_stage: 3
            llvm_stage_old: 2

    runs-on: ${{ matrix.os }}

    name: llvm stage ${{ matrix.llvm_stage }} (clang) - ${{ matrix.name }}

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{needs.should_run.outputs.output1}}
          # we dont need submodules anymore

      - name: '${{ matrix.icon }} Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          path-type: strict

      - name: update packages
        run: |
          pacman -Sy

      - name: install makefile
        run: |
          pacman -S --noconfirm --needed make

      - name: install cmake
        run: |
          pacman -S --noconfirm --needed cmake

      - name: install ninja
        run: |
          pacman -S --noconfirm --needed ninja

      - name: install python
        run: |
          pacman -S --noconfirm --needed python

      - name: install git
        run: |
          pacman -S --noconfirm --needed git

      - name: check if split program is cached
        run: |
          export MSYS=winsymlinks:native
          chmod +x ./try_get_release.sh
          ./try_get_release.sh   mgood7123   llvm-project-prebuilts   storage--split--windows   split.exe.tar

      - name: bootstrap stage ${{ matrix.llvm_stage_old }} rootfs
        run: |
          export MSYS=winsymlinks:native

          SO=${{ matrix.llvm_stage_old }}
          URL=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--llvm-stage-$SO--windows-msys2-final--release/rootfs.split.map

          # always download the previous stage's build rootfs
          mkdir final_llvm
          mkdir final_llvm/BUILD_ROOT
          ./split_exe/split.exe --join -r $URL --out final_llvm/BUILD_ROOT/ROOTFS

      - name: set compiler
        run: |
          echo "$(pwd)/final_llvm/BUILD_ROOT/ROOTFS/bin/clang" > c_compiler
          echo "$(pwd)/final_llvm/BUILD_ROOT/ROOTFS/bin/clang++" > cxx_compiler

      - name: download pre-cloned llvm-project
        run: |
          URL_LLVM=https://github.com/mgood7123/llvm-project-prebuilts/releases/download/storage--windows-llvm_git--release/llvm_git.split.map
          ./split_exe/split.exe --join -r $URL_LLVM --out llvm-project
          mkdir next_bin

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/llvm"
          export build_dir="final_llvm"
          export llvm_projects=""
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} llvm - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          mv -v "$(cat current_build_dir)/BUILD_ROOT/ROOTFS" .
          rm -rf "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)"
          mkdir "$(cat current_build_dir)/BUILD_ROOT"
          mv -v ROOTFS "$(cat current_build_dir)/BUILD_ROOT"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang  - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/clang"
          export build_dir="final_clang"
          export llvm_projects="clang"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/compiler-rt"
          export build_dir="final_compiler_rt"
          export llvm_projects=""
          export llvm_runtimes="compiler-rt"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} compiler-rt - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxx"
          export build_dir="final_libcxx"
          export llvm_projects=""
          export llvm_runtimes="libcxx"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxx - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libcxxabi"
          export build_dir="final_libcxxabi"
          export llvm_projects=""
          export llvm_runtimes="libcxxabi"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libcxxabi - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$rootfs"
          export source_dir="llvm-project/libunwind"
          export build_dir="final_libunwind"
          export llvm_projects=""
          export llvm_runtimes="libunwind"
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} libunwind - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/clang-tools-extra"
          export build_dir="final_tools_extra"
          export llvm_projects="clang-tools-extra"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} clang-tools-extra - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/lld"
          export build_dir="final_lld"
          export llvm_projects="lld"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lld - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/lldb"
          export build_dir="final_lldb"
          export llvm_projects="lldb"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} lldb - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/mlir"
          export build_dir="final_mlir"
          export llvm_projects="mlir"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} mlir - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Configure
        run: |
          export MSYS=winsymlinks:native
          export ACLOCAL_PATH=D:/a/_temp/msys64/usr/share/aclocal
          export c_compiler="$(cat c_compiler)"
          export cxx_compiler="$(cat cxx_compiler)"
          export rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export install_rootfs="$(pwd)/final_llvm/BUILD_ROOT/ROOTFS"
          export source_dir="llvm-project/polly"
          export build_dir="final_polly"
          export llvm_projects="polly"
          export llvm_runtimes=""
          echo "$build_dir" > current_build_dir
          cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS="$llvm_projects" -DLLVM_ENABLE_RUNTIMES="$llvm_runtimes" -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_ENABLE_ASSERTIONS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_PARALLEL_COMPILE_JOBS=$(nproc) -DLLVM_PARALLEL_LINK_JOBS=$(nproc) -DLLVM_PARALLEL_TABLEGEN_JOBS=$(nproc) -DLLVM_LIT_ARGS="-j $(nproc)" -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_BINDINGS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_MODULE_PATH="$(pwd)/cmake/packages" -DCMAKE_INSTALL_PREFIX="$install_rootfs" -DLLVM_BUILD_ROOT__ROOTFS="$rootfs" -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER="$c_compiler" -DCMAKE_CXX_COMPILER="$cxx_compiler" -DCMAKE_C_FLAGS="-g0 -O3" -DCMAKE_CXX_FLAGS="-g0 -O3" -DCMAKE_COLOR_DIAGNOSTICS=ON -DCMAKE_COLOR_MAKEFILE=ON -DCMAKE_VERBOSE_MAKEFILE=TRUE -S "$source_dir" -B "$build_dir"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Build
        run: |
          export MSYS=winsymlinks:native
          rm -rfv $(cat current_build_dir)/bin ; mv -v next_bin $(cat current_build_dir)/bin
          if cmake --build "$(cat current_build_dir)" -v
            then
              echo "build success"
              true
            else
              echo "build failed"
              false
          fi

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - Install
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native
          cmake --install "$(cat current_build_dir)"

      - name: cmake LLVM STAGE ${{ matrix.llvm_stage }} polly - Release - mv bin
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          mv -v $(cat current_build_dir)/bin next_bin
          rm -rf "$(cat current_build_dir)"

      - name: archive rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          # 500 mb
          #
          ./split_exe/split.exe --split -r final_llvm/BUILD_ROOT/ROOTFS --name rootfs --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l
      
      - name: upload rootfs directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "llvm stage ${{ matrix.llvm_stage }} - windows msys2 final - RELEASE"
          tag: "storage--llvm-stage-${{ matrix.llvm_stage }}--windows-msys2-final--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./rootfs.split.*

      - name: archive llvm commits directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          export MSYS=winsymlinks:native

          rm llvm_commits/llvm_commit_last
          cp llvm_commits/llvm_commit_current llvm_commits/llvm_commit_last

          # 500 mb
          #
          ./split_exe/split.exe --split -r llvm_commits --name llvm_commits --size $((1024*1024*500))

      - name: list files
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        run: |
          ls -l

      - name: upload llvm commits directory
        if: ${{ success() && always() }} # if we cancel during the upload, wait for it to complete
        uses: "ncipollo/release-action@v1"
        with:
          name: "windows - llvm commits - RELEASE"
          tag: "storage--windows-llvm_commits--release"
          makeLatest: true
          generateReleaseNotes: false
          allowUpdates: true
          artifactErrorsFailBuild: true
          replacesArtifacts: true
          removeArtifacts: true
          artifacts: |
            ./llvm_commits.split.*

  s1_final_built:
    needs: s1_final_llvm_stage_3
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows

    runs-on: ${{ matrix.os }}

    name: final clang stage 3 built - ${{ matrix.name }}

    steps:
      - name: complete
        shell: bash {0}
        run: |
          true
